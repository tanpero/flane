program ::= statement_list

statement_list ::= statement statement_list | Îµ

statement ::= if_statement
           | switch_statement
           | while_statement
           | for_statement
           | break_statement
           | continue_statement
           | return_statement
           | expression_statement
           | block_statement
           | variable_declaration

block_statement ::= "{" statement+ "}"

for_statement ::= "for" identifier : range statement

range ::= "range" expression ".." expression

match_statement ::= "match" expression "{" match_arms "}"

match_arms ::= match_arm ( match_arms )*

match_arm ::= pattern "->" expression_statement

pattern ::= identifier | "_" | literal | range | tuple_pattern | list_pattern | guard

tuple_pattern ::= "(" pattern ("," pattern)* ")"

list_pattern ::= "[" pattern ("," pattern)* "]"

guard ::= "if" expression

list_comprehension ::= "[" expression "for" identifier "in" expression ("," expression)* "]"

string ::= "'" character* "'" | "\"" character* "\"" | interpolation

interpolation_string ::= "`" (interpolation | character)* "`""

interpolation ::= "${" expression "}"

expression_statement ::= expression

expression ::= assignment_expression | conditional_expression | arithmetic_expression | literal

arithmetic_expression ::= term ("+" | "-") term*
                      | term

term ::= factor ("*" | "/" | "%") factor*

factor ::= ("-" | "+")? factor
        | primary_expression

logical_expression ::= equality_expression ("&&" | "||") equality_expression*

equality_expression ::= relational_expression ("==" | "!=") relational_expression*

relational_expression ::= shift_expression ("<" | ">" | "<=" | ">=") shift_expression*

shift_expression ::= additive_expression ("<<" | ">>") additive_expression*

additive_expression ::= multiplicative_expression ("+" | "-") multiplicative_expression*

multiplicative_expression ::= exponentiation ("*" | "/" | "%") exponentiation*

exponentiation ::= unary_expression "**" exponentiation | unary_expression

unary_expression ::= ("-" | "+" | "!" | "~") unary_expression
                  | primary_expression

primary_expression ::= identifier
                   | literal
                   | object_literal
                   | array_literal
                   | interpolation_string
                   | "(" expression ")"
                   | list_comprehension
                   | range
                   | function_calling

function_calling ::= identifier tuple_pattern

identifier ::= [a-zA-Z_$][a-zA-Z0-9_$]*

literal ::= number | string | "true" | "false" | "null"

object_literal ::= "{" (property_assignment ("," property_assignment)*)? "}"

property_assignment ::= identifier ":" expression

array_literal ::= "[" (expression ("," expression)*)? "]"

arrow_function ::= parameter "=>" arrow_function_body

parameter ::= identifier | "(" parameter_list ")"

parameter_list ::= parameter ("," parameter)*

arrow_function_body ::= expression | block_statement

variable_declaration ::= ("let" | "const") variable_list

variable_list ::= variable ("," variable)*

variable ::= identifier ("=" expression)?

number ::= dec_number | hex_number | integer | ratio

dec_number ::= ( [0-9]+ ( "_" )? )+ ( "." ( [0-9]+ ( "_" )? ) )?

hex_number ::= "0x" ( [0-9a-fA-F]+ ( "_" )? )+

integer ::= ( [0-9]+ ( "_" )? )+ "n"

ratio ::= ( [0-9]+ ( "_" )? )+ "r" ( [0-9]+ ( "_" )? )+
