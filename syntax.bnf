<program> ::= <statement>*

<statement> ::= <if_statement>
             | <switch_statement>
             | <while_statement>
             | <for_statement>
             | <break_statement>
             | <continue_statement>
             | <block_statement>
             | <expression_statement>
             | <declaration>

<if_statement> ::= "if" "(" <expression> ")" <statement> ("else" <statement>)?

<switch_statement> ::= "switch" "(" <expression> ")" "{" <switch_case>* "}"

<switch_case> ::= "case" <expression> ":" <statement>*
                | "default" ":" <statement>*

<while_statement> ::= "while" "(" <expression> ")" <statement>

<for_statement> ::= "for" "(" [<expression>] ";" [<expression>] ";" [<expression>] ")" <statement>

<break_statement> ::= "break" ";"

<continue_statement> ::= "continue" ";"

<block_statement> ::= "{" <statement>* "}"

<expression_statement> ::= <expression> ";"

<declaration> ::= "let" <identifier> ("=" <expression>)?
                 | "const" <identifier> "=" <expression>

<expression> ::= <assignment_expression>
              | <logical_expression>

<assignment_expression> ::= <identifier> "=" <expression>
                         | <identifier> "+=" <expression>
                         | <identifier> "-=" <expression>
                         | <identifier> "*=" <expression>
                         | <identifier> "/=" <expression>
                         | <identifier> "**=" <expression>
                         | <identifier> "%=" <expression>

<logical_expression> ::= <equality_expression> ("||" <equality_expression>)*

<equality_expression> ::= <relational_expression> ("==" <relational_expression>)*
                      | <relational_expression> ("!=" <relational_expression>)*

<relational_expression> ::= <additive_expression> ("<" <additive_expression>)*
                         | <additive_expression> (">" <additive_expression>)*
                         | <additive_expression> ("<=" <additive_expression>)*
                         | <additive_expression> (">=" <additive_expression>)*

<additive_expression> ::= <multiplicative_expression> ("+" <multiplicative_expression>)*
                      | <multiplicative_expression> ("-" <multiplicative_expression>)*

<multiplicative_expression> ::= <exponent_expression> ("*" <exponent_expression>)*
                            | <exponent_expression> ("/" <exponent_expression>)*
                            | <exponent_expression> ("%" <exponent_expression>)*

<exponent_expression> ::= <unary_expression> "**" <unary_expression>

<unary_expression> ::= "+" <unary_expression>
                   | "-" <unary_expression>
                   | "!" <unary_expression>
                   | <primary_expression>

<primary_expression> ::= <literal>
                     | <identifier>
                     | <object_literal>
                     | <array_literal>
                     | "(" <expression> ")"

<object_literal> ::= "{" (<property_assignment> ("," <property_assignment>)*)? "}"

<property_assignment> ::= <identifier> ":" <expression>

<array_literal> ::= "[" (<expression> ("," <expression>)*)? "]"

<arrow_function> ::= <parameter> "=>" <expression>

<parameter> ::= <identifier>

<identifier> ::= [a-zA-Z_$] [a-zA-Z0-9_$]*

<literal> ::= <string_literal>
           | <number_literal>
           | <boolean_literal>
           | "null"
           | "undefined"

<string_literal> ::= `"` <character>* `"`
                 | "'" <character>* "'"

<number_literal> ::= <integer> | <float>

<boolean_literal> ::= "true" | "false"

<integer> ::= [0-9]+
<float> ::= [0-9]+ "." [0-9]+
<character> ::= any character
